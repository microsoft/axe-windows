// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
using Axe.Windows.Core.Bases;
using Axe.Windows.Core.Enums;
using Axe.Windows.UnitTestSharedLibrary;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using EvaluationCode = Axe.Windows.Rules.EvaluationCode;

namespace Axe.Windows.RulesTest
{
    [TestClass]
    public class MonsterTest
    {
        [TestMethod()]
        public void MonsterButtonTest()
        {
            A11yElement e = Utility.LoadA11yElementsFromJSON("Snapshots/MonsterButton.snapshot");
            var results = GetTestResultsAsDictionary(e);

            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleCompletelyObscuresContainer]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleContainedInParent]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleDataFormatCorrect]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleNotAllZeros]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleNotValidButOffScreen]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnUWPMenuBar]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnUWPMenuItem]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnWPFTextParent]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleSizeReasonable]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.ButtonShouldHavePatterns]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ChildrenNotAllowedInContentView]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SiblingUniqueAndFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SiblingUniqueAndNotFocusable]);
            Assert.AreEqual(EvaluationCode.Note, results[RuleId.ContentViewButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewCalendarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewCheckBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewComboBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewDataGridStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewEditStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewHyperlinkStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewListItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewListStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewMenuStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewProgressBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewRadioButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSliderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSpinnerStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSplitButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewStatusBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTabStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTreeItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTreeStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportInvokePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportScrollPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportTablePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportTogglePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportWindowPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportExpandCollapsePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportGridItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportGridPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportInvokePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportScrollItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSelectionItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSelectionPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSpreadsheetItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTableItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTablePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTogglePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTransformPattern]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.ControlViewButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewCalendarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewCheckBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewComboBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewDataGridStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewEditStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHeaderItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHeaderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHyperlinkStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewImageStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewListItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewListStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewMenuStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewProgressBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewRadioButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSemanticZoomStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSeparatorStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSliderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSpinnerStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSplitButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewStatusBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTabStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewThumbStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewToolTipStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTreeItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTreeStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.EditSupportsIncorrectRangeValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.EditSupportsOnlyValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.HeadingLevelDescendsWhenNested]);
            Assert.AreEqual(EvaluationCode.Warning, results[RuleId.HelpTextNotEqualToName]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementFalseOptional]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementTrueOptional]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsControlElementPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsControlElementTrueOptional]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsControlElementTrueRequired]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableDescendantTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableFalseButDisabled]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableFalseButOffscreen]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableForCustomShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableForListItemShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableOnEmptyContainer]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableShouldBeFalse]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsKeyboardFocusableShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableTopLevelTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ItemStatusExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ItemTypeRecommended]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkBannerIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkComplementaryIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkContentInfoIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkMainIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkNoDuplicateBanner]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkNoDuplicateContentInfo]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkOneMain]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedControlTypeNotCustom]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotEmpty]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotNull]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeReasonable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeExcludesSpecialCharacters]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeIsReasonableLength]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotCustom]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotEmpty]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameEmptyButElementNotKeyboardFocusable]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.NameExcludesControlType]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.NameExcludesLocalizedControlType]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.NameExcludesSpecialCharacters]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.NameIsInformative]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNoSiblingsOfSameType]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.NameNotEmpty]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.NameNotNull]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.NameNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNullButElementNotKeyboardFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameOnCustomWithParentWPFDataItem]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameOnOptionalType]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.NameReasonableLength]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameWithValidBoundingRectangle]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.OrientationPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ProgressBarRangeValue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SelectionPatternSelectionRequired]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SelectionPatternSingleSelection]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSetInfo]);
        }

        [TestMethod()]
        public void MonsterListView()
        {
            A11yElement e = Utility.LoadA11yElementsFromJSON("Snapshots/MonsterListView.snapshot");
            var results = GetTestResultsAsDictionary(e);

            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleCompletelyObscuresContainer]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleContainedInParent]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleDataFormatCorrect]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleNotAllZeros]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleNotValidButOffScreen]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnUWPMenuBar]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnUWPMenuItem]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnWPFTextParent]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleSizeReasonable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ButtonShouldHavePatterns]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ChildrenNotAllowedInContentView]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SiblingUniqueAndFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SiblingUniqueAndNotFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewCalendarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewCheckBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewComboBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewDataGridStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewEditStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewHyperlinkStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewListItemStructure]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.ContentViewListStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewMenuStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewProgressBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewRadioButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSliderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSpinnerStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSplitButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewStatusBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTabStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTreeItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTreeStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportInvokePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportScrollPattern]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.ControlShouldNotSupportTablePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportTogglePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportWindowPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportExpandCollapsePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportGridItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportGridPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportInvokePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportScrollItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSelectionItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSelectionPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSpreadsheetItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTableItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTablePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTogglePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTransformPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewCalendarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewCheckBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewComboBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewDataGridStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewEditStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHeaderItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHeaderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHyperlinkStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewImageStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewListItemStructure]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.ControlViewListStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewMenuStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewProgressBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewRadioButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSemanticZoomStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSeparatorStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSliderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSpinnerStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSplitButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewStatusBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTabStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewThumbStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewToolTipStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTreeItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTreeStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.EditSupportsIncorrectRangeValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.EditSupportsOnlyValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.HeadingLevelDescendsWhenNested]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.HelpTextNotEqualToName]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementFalseOptional]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementTrueOptional]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsControlElementPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsControlElementTrueOptional]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsControlElementTrueRequired]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableDescendantTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableFalseButDisabled]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableFalseButOffscreen]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableForCustomShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableForListItemShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableOnEmptyContainer]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableShouldBeFalse]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableTopLevelTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ItemStatusExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ItemTypeRecommended]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkBannerIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkComplementaryIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkContentInfoIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkMainIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkNoDuplicateBanner]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkNoDuplicateContentInfo]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkOneMain]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedControlTypeNotCustom]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotEmpty]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotNull]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeReasonable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeExcludesSpecialCharacters]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeIsReasonableLength]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotCustom]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotEmpty]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameEmptyButElementNotKeyboardFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesControlType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesLocalizedControlType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesSpecialCharacters]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameIsInformative]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNoSiblingsOfSameType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNotEmpty]);
            Assert.AreEqual(EvaluationCode.Error, results[RuleId.NameNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNullButElementNotKeyboardFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameOnCustomWithParentWPFDataItem]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameOnOptionalType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameReasonableLength]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameWithValidBoundingRectangle]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.OrientationPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ProgressBarRangeValue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SelectionPatternSelectionRequired]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SelectionPatternSingleSelection]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSetInfo]);
        }

        [TestMethod()]
        public void MonsterDataGrid()
        {
            A11yElement e = Utility.LoadA11yElementsFromJSON("Snapshots/MonsterDataGrid.snapshot");
            var results = GetTestResultsAsDictionary(e);

            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleCompletelyObscuresContainer]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleContainedInParent]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleDataFormatCorrect]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleNotAllZeros]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleNotValidButOffScreen]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnUWPMenuBar]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnUWPMenuItem]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnWPFTextParent]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleSizeReasonable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ButtonShouldHavePatterns]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ChildrenNotAllowedInContentView]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SiblingUniqueAndFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SiblingUniqueAndNotFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewCalendarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewCheckBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewComboBoxStructure]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.ContentViewDataGridStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewEditStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewHyperlinkStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewListItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewListStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewMenuStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewProgressBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewRadioButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSliderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSpinnerStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSplitButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewStatusBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTabStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTreeItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTreeStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportInvokePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportScrollPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportTablePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportTogglePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportWindowPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportExpandCollapsePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportGridItemPattern]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.ControlShouldSupportGridPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportInvokePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportScrollItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSelectionItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSelectionPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSpreadsheetItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTableItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTablePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTogglePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTransformPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewCalendarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewCheckBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewComboBoxStructure]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.ControlViewDataGridStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewEditStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHeaderItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHeaderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHyperlinkStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewImageStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewListItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewListStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewMenuStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewProgressBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewRadioButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSemanticZoomStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSeparatorStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSliderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSpinnerStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSplitButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewStatusBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTabStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewThumbStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewToolTipStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTreeItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTreeStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.EditSupportsIncorrectRangeValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.EditSupportsOnlyValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.HeadingLevelDescendsWhenNested]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.HelpTextNotEqualToName]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementFalseOptional]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementTrueOptional]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsControlElementPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsControlElementTrueOptional]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsControlElementTrueRequired]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableDescendantTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableFalseButDisabled]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableFalseButOffscreen]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableForCustomShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableForListItemShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableOnEmptyContainer]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableShouldBeFalse]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableTopLevelTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ItemStatusExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ItemTypeRecommended]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkBannerIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkComplementaryIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkContentInfoIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkMainIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkNoDuplicateBanner]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkNoDuplicateContentInfo]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkOneMain]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedControlTypeNotCustom]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotEmpty]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotNull]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeReasonable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeExcludesSpecialCharacters]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeIsReasonableLength]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotCustom]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotEmpty]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameEmptyButElementNotKeyboardFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesControlType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesLocalizedControlType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesSpecialCharacters]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameIsInformative]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNoSiblingsOfSameType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNotEmpty]);
            Assert.AreEqual(EvaluationCode.Error, results[RuleId.NameNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNullButElementNotKeyboardFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameOnCustomWithParentWPFDataItem]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameOnOptionalType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameReasonableLength]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameWithValidBoundingRectangle]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.OrientationPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ProgressBarRangeValue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SelectionPatternSelectionRequired]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SelectionPatternSingleSelection]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSetInfo]);
        }

        [TestMethod()]
        public void MonsterDataGridHeader()
        {
            A11yElement e = Utility.LoadA11yElementsFromJSON("Snapshots/MonsterDataGrid.snapshot").Children.First<A11yElement>();
            var results = GetTestResultsAsDictionary(e);

            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleCompletelyObscuresContainer]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleContainedInParent]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleDataFormatCorrect]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleNotAllZeros]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleNotValidButOffScreen]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnUWPMenuBar]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnUWPMenuItem]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnWPFTextParent]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleSizeReasonable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ButtonShouldHavePatterns]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ChildrenNotAllowedInContentView]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SiblingUniqueAndFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SiblingUniqueAndNotFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewCalendarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewCheckBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewComboBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewDataGridStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewEditStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewHyperlinkStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewListItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewListStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewMenuStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewProgressBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewRadioButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSliderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSpinnerStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSplitButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewStatusBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTabStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTreeItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTreeStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportInvokePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportScrollPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportTablePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportTogglePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportWindowPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportExpandCollapsePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportGridItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportGridPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportInvokePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportScrollItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSelectionItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSelectionPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSpreadsheetItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTableItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTablePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTogglePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTransformPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewCalendarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewCheckBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewComboBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewDataGridStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewEditStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHeaderItemStructure]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.ControlViewHeaderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHyperlinkStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewImageStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewListItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewListStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewMenuStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewProgressBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewRadioButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSemanticZoomStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSeparatorStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSliderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSpinnerStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSplitButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewStatusBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTabStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewThumbStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewToolTipStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTreeItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTreeStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.EditSupportsIncorrectRangeValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.EditSupportsOnlyValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.HeadingLevelDescendsWhenNested]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.HelpTextNotEqualToName]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementFalseOptional]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementTrueOptional]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsControlElementPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsControlElementTrueOptional]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsControlElementTrueRequired]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableDescendantTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableFalseButDisabled]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableFalseButOffscreen]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableForCustomShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableForListItemShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableOnEmptyContainer]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsKeyboardFocusableShouldBeFalse]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableTopLevelTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ItemStatusExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ItemTypeRecommended]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkBannerIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkComplementaryIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkContentInfoIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkMainIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkNoDuplicateBanner]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkNoDuplicateContentInfo]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkOneMain]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedControlTypeNotCustom]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedControlTypeNotEmpty]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedControlTypeNotNull]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeReasonable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeExcludesSpecialCharacters]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeIsReasonableLength]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotCustom]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotEmpty]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameEmptyButElementNotKeyboardFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesControlType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesLocalizedControlType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesSpecialCharacters]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameIsInformative]);
            Assert.AreEqual(EvaluationCode.Note, results[RuleId.NameNoSiblingsOfSameType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNotEmpty]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNullButElementNotKeyboardFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameOnCustomWithParentWPFDataItem]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameOnOptionalType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameReasonableLength]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameWithValidBoundingRectangle]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.OrientationPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ProgressBarRangeValue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SelectionPatternSelectionRequired]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SelectionPatternSingleSelection]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSetInfo]);
        }

        [TestMethod()]
        public void MonsterEdit()
        {
            A11yElement e = Utility.LoadA11yElementsFromJSON("Snapshots/MonsterEdit.snapshot");
            var results = GetTestResultsAsDictionary(e);

            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleCompletelyObscuresContainer]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleContainedInParent]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleDataFormatCorrect]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleNotAllZeros]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleNotValidButOffScreen]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnUWPMenuBar]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnUWPMenuItem]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnWPFTextParent]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleSizeReasonable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ButtonShouldHavePatterns]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ChildrenNotAllowedInContentView]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SiblingUniqueAndFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SiblingUniqueAndNotFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewCalendarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewCheckBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewComboBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewDataGridStructure]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.ContentViewEditStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewHyperlinkStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewListItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewListStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewMenuStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewProgressBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewRadioButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSliderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSpinnerStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSplitButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewStatusBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTabStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTreeItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTreeStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportInvokePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportScrollPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportTablePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportTogglePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportWindowPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportExpandCollapsePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportGridItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportGridPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportInvokePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportScrollItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSelectionItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSelectionPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSpreadsheetItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTableItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTablePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTogglePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTransformPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewCalendarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewCheckBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewComboBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewDataGridStructure]);
            Assert.AreEqual(EvaluationCode.Note, results[RuleId.ControlViewEditStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHeaderItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHeaderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHyperlinkStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewImageStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewListItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewListStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewMenuStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewProgressBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewRadioButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSemanticZoomStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSeparatorStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSliderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSpinnerStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSplitButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewStatusBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTabStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewThumbStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewToolTipStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTreeItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTreeStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.EditSupportsIncorrectRangeValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.EditSupportsOnlyValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.HeadingLevelDescendsWhenNested]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.HelpTextNotEqualToName]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementFalseOptional]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementTrueOptional]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsControlElementPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsControlElementTrueOptional]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsControlElementTrueRequired]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableDescendantTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableFalseButDisabled]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableFalseButOffscreen]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableForCustomShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableForListItemShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableOnEmptyContainer]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableShouldBeFalse]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsKeyboardFocusableShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsKeyboardFocusableTopLevelTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ItemStatusExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ItemTypeRecommended]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkBannerIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkComplementaryIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkContentInfoIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkMainIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkNoDuplicateBanner]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkNoDuplicateContentInfo]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkOneMain]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedControlTypeNotCustom]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotEmpty]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotNull]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeReasonable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeExcludesSpecialCharacters]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeIsReasonableLength]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotCustom]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotEmpty]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameEmptyButElementNotKeyboardFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesControlType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesLocalizedControlType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesSpecialCharacters]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameIsInformative]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNoSiblingsOfSameType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNotEmpty]);
            Assert.AreEqual(EvaluationCode.Error, results[RuleId.NameNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNullButElementNotKeyboardFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameOnCustomWithParentWPFDataItem]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameOnOptionalType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameReasonableLength]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameWithValidBoundingRectangle]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.OrientationPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ProgressBarRangeValue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SelectionPatternSelectionRequired]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SelectionPatternSingleSelection]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSetInfo]);
        }

        [TestMethod()]
        public void MonsterMenu()
        {
            A11yElement e = Utility.LoadA11yElementsFromJSON("Snapshots/MonsterMenu.snapshot");
            var results = GetTestResultsAsDictionary(e);

            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleCompletelyObscuresContainer]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleContainedInParent]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleDataFormatCorrect]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleNotAllZeros]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleNotValidButOffScreen]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnUWPMenuBar]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnUWPMenuItem]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnWPFTextParent]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleSizeReasonable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ButtonShouldHavePatterns]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ChildrenNotAllowedInContentView]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SiblingUniqueAndFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SiblingUniqueAndNotFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewCalendarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewCheckBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewComboBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewDataGridStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewEditStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewHyperlinkStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewListItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewListStructure]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.ContentViewMenuStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewProgressBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewRadioButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSliderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSpinnerStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSplitButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewStatusBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTabStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTreeItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTreeStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportInvokePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportScrollPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportTablePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportTogglePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportWindowPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportExpandCollapsePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportGridItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportGridPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportInvokePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportScrollItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSelectionItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSelectionPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSpreadsheetItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTableItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTablePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTogglePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTransformPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewCalendarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewCheckBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewComboBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewDataGridStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewEditStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHeaderItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHeaderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHyperlinkStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewImageStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewListItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewListStructure]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.ControlViewMenuStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewProgressBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewRadioButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSemanticZoomStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSeparatorStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSliderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSpinnerStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSplitButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewStatusBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTabStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewThumbStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewToolTipStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTreeItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTreeStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.EditSupportsIncorrectRangeValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.EditSupportsOnlyValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.HeadingLevelDescendsWhenNested]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.HelpTextNotEqualToName]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementFalseOptional]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementTrueOptional]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsControlElementPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsControlElementTrueOptional]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsControlElementTrueRequired]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableDescendantTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableFalseButDisabled]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableFalseButOffscreen]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableForCustomShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableForListItemShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableOnEmptyContainer]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableShouldBeFalse]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsKeyboardFocusableShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableTopLevelTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ItemStatusExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ItemTypeRecommended]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkBannerIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkComplementaryIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkContentInfoIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkMainIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkNoDuplicateBanner]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkNoDuplicateContentInfo]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkOneMain]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedControlTypeNotCustom]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotEmpty]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotNull]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeReasonable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeExcludesSpecialCharacters]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeIsReasonableLength]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotCustom]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotEmpty]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameEmptyButElementNotKeyboardFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesControlType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesLocalizedControlType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesSpecialCharacters]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameIsInformative]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNoSiblingsOfSameType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNotEmpty]);
            Assert.AreEqual(EvaluationCode.Error, results[RuleId.NameNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNullButElementNotKeyboardFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameOnCustomWithParentWPFDataItem]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameOnOptionalType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameReasonableLength]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameWithValidBoundingRectangle]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.OrientationPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ProgressBarRangeValue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SelectionPatternSelectionRequired]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SelectionPatternSingleSelection]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSetInfo]);
        }

        [TestMethod()]
        public void MonsterUserControl()
        {
            A11yElement e = Utility.LoadA11yElementsFromJSON("Snapshots/MonsterUserControl.snapshot");
            var results = GetTestResultsAsDictionary(e);

            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleCompletelyObscuresContainer]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleContainedInParent]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleDataFormatCorrect]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleNotAllZeros]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleNotValidButOffScreen]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnUWPMenuBar]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnUWPMenuItem]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.BoundingRectangleOnWPFTextParent]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.BoundingRectangleSizeReasonable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ButtonShouldHavePatterns]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ChildrenNotAllowedInContentView]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SiblingUniqueAndFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SiblingUniqueAndNotFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewCalendarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewCheckBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewComboBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewDataGridStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewEditStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewHyperlinkStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewListItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewListStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewMenuStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewProgressBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewRadioButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSliderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSpinnerStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewSplitButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewStatusBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTabStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTreeItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ContentViewTreeStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportInvokePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportScrollPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportTablePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportTogglePattern]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.ControlShouldNotSupportValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldNotSupportWindowPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportExpandCollapsePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportGridItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportGridPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportInvokePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportScrollItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSelectionItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSelectionPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSpreadsheetItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTableItemPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTablePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTogglePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportTransformPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewCalendarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewCheckBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewComboBoxStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewDataGridStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewEditStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHeaderItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHeaderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewHyperlinkStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewImageStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewListItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewListStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewMenuStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewProgressBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewRadioButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSemanticZoomStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSeparatorStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSliderStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSpinnerStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewSplitButtonStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewStatusBarStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTabStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewThumbStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewToolTipStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTreeItemStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlViewTreeStructure]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.EditSupportsIncorrectRangeValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.EditSupportsOnlyValuePattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.HeadingLevelDescendsWhenNested]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.HelpTextNotEqualToName]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementFalseOptional]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.IsContentElementPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsContentElementTrueOptional]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsControlElementPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsControlElementTrueOptional]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsControlElementTrueRequired]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableDescendantTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableFalseButDisabled]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableFalseButOffscreen]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableForCustomShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableForListItemShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableOnEmptyContainer]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableShouldBeFalse]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableShouldBeTrue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.IsKeyboardFocusableTopLevelTextPattern]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ItemStatusExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ItemTypeRecommended]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkBannerIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkComplementaryIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkContentInfoIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkMainIsTopLevel]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkNoDuplicateBanner]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkNoDuplicateContentInfo]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LandmarkOneMain]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedControlTypeNotCustom]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedControlTypeNotEmpty]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedControlTypeNotNull]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.LocalizedControlTypeReasonable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeExcludesSpecialCharacters]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeIsReasonableLength]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotCustom]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotEmpty]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotNull]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.LocalizedLandmarkTypeNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.NameEmptyButElementNotKeyboardFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesControlType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameExcludesLocalizedControlType]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.NameExcludesSpecialCharacters]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.NameIsInformative]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNoSiblingsOfSameType]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNotEmpty]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameNotNull]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.NameNotWhiteSpace]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.NameNullButElementNotKeyboardFocusable]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameOnCustomWithParentWPFDataItem]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameOnOptionalType]);
            Assert.AreEqual(EvaluationCode.Pass, results[RuleId.NameReasonableLength]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.NameWithValidBoundingRectangle]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.OrientationPropertyExists]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ProgressBarRangeValue]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SelectionPatternSelectionRequired]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.SelectionPatternSingleSelection]);
            Assert.AreEqual(EvaluationCode.NotApplicable, results[RuleId.ControlShouldSupportSetInfo]);
        }

        private static Dictionary<RuleId, EvaluationCode> GetTestResultsAsDictionary(A11yElement e)
        {
            var results = Axe.Windows.Rules.Rules.RunAll(e);
            return results.ToDictionary(r => r.RuleInfo.ID, r => r.EvaluationCode);
        }

        private static void WriteResultsToDebugOutput(Dictionary<RuleId, EvaluationCode> results)
        {
            System.Diagnostics.Debug.WriteLine("{");

            foreach (var key in results.Keys.OrderBy(k => k.ToString()))
                System.Diagnostics.Debug.WriteLine($"Assert.AreEqual(EvaluationCode.{results[key]}, results[RuleId.{key}]);");

            System.Diagnostics.Debug.WriteLine("}");
        }
    } // class
} // namespace
