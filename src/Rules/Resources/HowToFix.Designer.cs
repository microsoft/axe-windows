//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Axe.Windows.Rules.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class HowToFix {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal HowToFix() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Axe.Windows.Rules.Resources.HowToFix", typeof(HowToFix).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify one or both bounding rectangles to ensure that the bounding rectangle of the container element is not completely obscured..
        /// </summary>
        internal static string BoundingRectangleCompletelyObscuresContainer {
            get {
                return ResourceManager.GetString("BoundingRectangleCompletelyObscuresContainer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify one or both bounding rectangles to ensure that the element&apos;s bounding rectangle is contained within the bounding rectangle of its parent..
        /// </summary>
        internal static string BoundingRectangleContainedInParent {
            get {
                return ResourceManager.GetString("BoundingRectangleContainedInParent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make sure the BoundingRectangle property returns data in the expected format:
        /// 1. Specify the rectangle as an array with a type of double and a size of 4.
        /// 2. Specify the rectangle&apos;s position and size (in pixels) by providing array values in the following order:
        ///    a. Top edge
        ///    b. Left edge
        ///    c. Width
        ///    d. Height.
        /// </summary>
        internal static string BoundingRectangleDataFormatCorrect {
            get {
                return ResourceManager.GetString("BoundingRectangleDataFormatCorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the rectangle&apos;s position and size (in pixels) by providing array values in the following order:
        /// 1. Top edge
        /// 2. Left edge
        /// 3. Width
        /// 4. Height.
        /// </summary>
        internal static string BoundingRectangleNotAllZeros {
            get {
                return ResourceManager.GetString("BoundingRectangleNotAllZeros", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the element is off-screen, set its IsOffscreen property to TRUE.
        ///If the element is on-screen, provide a BoundingRectangle property..
        /// </summary>
        internal static string BoundingRectangleNotNull {
            get {
                return ResourceManager.GetString("BoundingRectangleNotNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove the BoundingRectangle property when the element is off-screen..
        /// </summary>
        internal static string BoundingRectangleNotValidButOffScreen {
            get {
                return ResourceManager.GetString("BoundingRectangleNotValidButOffScreen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the BoundingRectangle property so that its width and height define an area of at least 25 pixels..
        /// </summary>
        internal static string BoundingRectangleSizeReasonable {
            get {
                return ResourceManager.GetString("BoundingRectangleSizeReasonable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the button to support exactly one of the following patterns:
        /// · Support the Invoke pattern if the button performs a command at the request of the user.
        /// · Support the ExpandCollapse pattern if the button shows or hides additional content..
        /// </summary>
        internal static string ButtonInvokeAndExpandCollapsePatterns {
            get {
                return ResourceManager.GetString("ButtonInvokeAndExpandCollapsePatterns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the button to support exactly one of the following patterns:
        /// · Support the Invoke pattern if the button performs a command at the request of the user.
        /// · Support the Toggle pattern if the button can cycle through a series of up to three states.
        /// · Support the ExpandCollapse pattern if the button shows or hides additional content..
        /// </summary>
        internal static string ButtonInvokeAndTogglePatterns {
            get {
                return ResourceManager.GetString("ButtonInvokeAndTogglePatterns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the button to support exactly one of the following patterns:
        /// · Support the Invoke pattern if the button performs a command at the request of the user.
        /// · Support the Toggle pattern if the button can cycle through a series of up to three states.
        /// · Support the ExpandCollapse pattern if the button shows or hides additional content..
        /// </summary>
        internal static string ButtonShouldHavePatterns {
            get {
                return ResourceManager.GetString("ButtonShouldHavePatterns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the button to support exactly one of the following patterns:
        /// · Support the Invoke pattern if the button performs a command at the request of the user.
        /// · Support the Toggle pattern if the button can cycle through a series of up to three states.
        /// · Support the ExpandCollapse pattern if the button shows or hides additional content..
        /// </summary>
        internal static string ButtonToggleAndExpandCollapsePatterns {
            get {
                return ResourceManager.GetString("ButtonToggleAndExpandCollapsePatterns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the button to support exactly one of the following patterns:
        /// · Support the Invoke pattern if the button performs a command at the request of the user.
        /// · Support the Toggle pattern if the button can cycle through a series of up to three states.
        /// · Support the ExpandCollapse pattern if the button shows or hides additional content..
        /// </summary>
        internal static string ButtonWithSplitButtonParentPattern {
            get {
                return ResourceManager.GetString("ButtonWithSplitButtonParentPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make sure all of the element&apos;s children have the IsContentElement property set to FALSE..
        /// </summary>
        internal static string ChildrenNotAllowedInContentView {
            get {
                return ResourceManager.GetString("ChildrenNotAllowedInContentView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a web-based scanner (for example, Accessibility Insights for Web) to scan this component..
        /// </summary>
        internal static string ChromiumComponentsShouldUseWebScanner {
            get {
                return ResourceManager.GetString("ChromiumComponentsShouldUseWebScanner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the element&apos;s ClickablePoint property is correct, set the element&apos;s IsOffScreen property to true.
        ///If the element&apos;s ClickablePoint property is incorrect, please ensure it returns the correct value..
        /// </summary>
        internal static string ClickablePointOffScreen {
            get {
                return ResourceManager.GetString("ClickablePointOffScreen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the element&apos;s ClickablePoint property is correct, set the element&apos;s IsOffScreen property to false.
        ///If the element&apos;s ClickablePoint property is incorrect, please ensure it returns the correct value..
        /// </summary>
        internal static string ClickablePointOnScreen {
            get {
                return ResourceManager.GetString("ClickablePointOnScreen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the combo box to not support the Scroll pattern..
        /// </summary>
        internal static string ComboBoxShouldNotSupportScrollPattern {
            get {
                return ResourceManager.GetString("ComboBoxShouldNotSupportScrollPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Make sure the element has the appropriate ControlType property for its function.
        ///2. Modify the element to support only its allowed patterns..
        /// </summary>
        internal static string ControlShouldNotSupportInvokePattern {
            get {
                return ResourceManager.GetString("ControlShouldNotSupportInvokePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Make sure the element has the appropriate ControlType property for its function.
        ///2. Modify the element to support only its allowed patterns..
        /// </summary>
        internal static string ControlShouldNotSupportScrollPattern {
            get {
                return ResourceManager.GetString("ControlShouldNotSupportScrollPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Make sure the element has the appropriate ControlType property for its function.
        ///2. Modify the element to support only its allowed patterns..
        /// </summary>
        internal static string ControlShouldNotSupportTogglePattern {
            get {
                return ResourceManager.GetString("ControlShouldNotSupportTogglePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the element to not support the Value pattern..
        /// </summary>
        internal static string ControlShouldNotSupportValuePattern {
            get {
                return ResourceManager.GetString("ControlShouldNotSupportValuePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the element to not support the Window pattern..
        /// </summary>
        internal static string ControlShouldNotSupportWindowPattern {
            get {
                return ResourceManager.GetString("ControlShouldNotSupportWindowPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Make sure the element has the appropriate ControlType property for its function.
        ///2. If the current ControlType is correct, modify the element to support the ExpandCollapse pattern..
        /// </summary>
        internal static string ControlShouldSupportExpandCollapsePattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportExpandCollapsePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the element (or one of its children) to support the GridItem pattern..
        /// </summary>
        internal static string ControlShouldSupportGridItemPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportGridItemPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Make sure the element has the appropriate ControlType property for its function.
        ///2. If the current ControlType is correct, modify the element to support the Grid pattern..
        /// </summary>
        internal static string ControlShouldSupportGridPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportGridPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Make sure the element has the appropriate ControlType property for its function.
        ///2. If the current ControlType is correct, modify the element to support the Invoke pattern..
        /// </summary>
        internal static string ControlShouldSupportInvokePattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportInvokePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the element (or one of its children) to support the ScrollItem pattern..
        /// </summary>
        internal static string ControlShouldSupportScrollItemPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportScrollItemPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Make sure the element has the appropriate ControlType property for its function.
        ///2. If the current ControlType is correct, modify the element to support the SelectionItem pattern..
        /// </summary>
        internal static string ControlShouldSupportSelectionItemPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportSelectionItemPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Make sure the element has the appropriate ControlType property for its function.
        ///2. If the current ControlType is correct, modify the element to support the Selection pattern..
        /// </summary>
        internal static string ControlShouldSupportSelectionPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportSelectionPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide valid values for the SizeOfSet and PositionInSet properties..
        /// </summary>
        internal static string ControlShouldSupportSetInfo {
            get {
                return ResourceManager.GetString("ControlShouldSupportSetInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the element (or one of its children) to support the SpreadsheetItem pattern..
        /// </summary>
        internal static string ControlShouldSupportSpreadsheetItemPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportSpreadsheetItemPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the element (or one of its children) to support the TableItem pattern..
        /// </summary>
        internal static string ControlShouldSupportTableItemPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportTableItemPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Make sure the element has the appropriate ControlType property for its function.
        ///2. If the current ControlType is correct, modify the element to support the Table pattern..
        /// </summary>
        internal static string ControlShouldSupportTablePattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportTablePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Make sure the element has the appropriate ControlType property for its function.
        ///2. If the current ControlType is correct, modify the element to support the Text pattern..
        /// </summary>
        internal static string ControlShouldSupportTextPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportTextPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Make sure the element has the appropriate ControlType property for its function.
        ///2. If the current ControlType is correct, modify the element to support the Toggle pattern..
        /// </summary>
        internal static string ControlShouldSupportTogglePattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportTogglePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the element can be resized, implement the Transform pattern.
        ///If the element can&apos;t be resized, ensure the TransformPattern_CanResize property is FALSE..
        /// </summary>
        internal static string ControlShouldSupportTransformPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportTransformPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The non-Chromium version of Edge has reached its end of life and should not be used for current product development. Please migrate your application to a supported browser..
        /// </summary>
        internal static string EdgeBrowserHasBeenDeprecated {
            get {
                return ResourceManager.GetString("EdgeBrowserHasBeenDeprecated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implement the edit control&apos;s RangeValue pattern with a null LargeChange property..
        /// </summary>
        internal static string EditSupportsIncorrectRangeValuePattern {
            get {
                return ResourceManager.GetString("EditSupportsIncorrectRangeValuePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch your application to a framework that supports UI Automation..
        /// </summary>
        internal static string FrameworkDoesNotSupportUIAutomation {
            get {
                return ResourceManager.GetString("FrameworkDoesNotSupportUIAutomation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the heading levels and/or nesting structure of the element and/or its ancestors.
        ///For example, if an element has a level-5 heading, its descendants can have only level-5 or level-6 headings..
        /// </summary>
        internal static string HeadingLevelDescendsWhenNested {
            get {
                return ResourceManager.GetString("HeadingLevelDescendsWhenNested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Write meaningful text for the element&apos;s UI Automation HelpText property. This text is typically similar to, or taken from, a tooltip or placeholder, such as &quot;type here to search&quot;..
        /// </summary>
        internal static string HelpTextNotEqualToName {
            get {
                return ResourceManager.GetString("HelpTextNotEqualToName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the sibling hyperlink with the same Name navigates to a different destination, change the Name of either hyperlink..
        /// </summary>
        internal static string HyperlinkNameShouldBeUnique {
            get {
                return ResourceManager.GetString("HyperlinkNameShouldBeUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the IsContentElement UI Automation property to false..
        /// </summary>
        internal static string IsContentElementFalseOptional {
            get {
                return ResourceManager.GetString("IsContentElementFalseOptional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a value for the element&apos;s IsContentElement property:
        /// · If the element should be included in the content view, set the property to TRUE.
        /// · If the element should not be included in the content view, set the property to FALSE..
        /// </summary>
        internal static string IsContentElementPropertyExists {
            get {
                return ResourceManager.GetString("IsContentElementPropertyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the IsContentElement UI Automation property to true..
        /// </summary>
        internal static string IsContentElementTrueOptional {
            get {
                return ResourceManager.GetString("IsContentElementTrueOptional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a value for the element&apos;s IsControlElement property:
        /// · If the element should be included in the control view, set the property to TRUE.
        /// · If the element should not be included in the control view, set the property to FALSE..
        /// </summary>
        internal static string IsControlElementPropertyExists {
            get {
                return ResourceManager.GetString("IsControlElementPropertyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the IsControlElement UI Automation property to true..
        /// </summary>
        internal static string IsControlElementTrueOptional {
            get {
                return ResourceManager.GetString("IsControlElementTrueOptional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the element&apos;s IsControlElement property to TRUE..
        /// </summary>
        internal static string IsControlElementTrueRequired {
            get {
                return ResourceManager.GetString("IsControlElementTrueRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the IsKeyboardFocusable property to be false..
        /// </summary>
        internal static string IsKeyboardFocusableDescendantTextPattern {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableDescendantTextPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this element is still reachable via the keyboard even when it is disabled, set the IsKeyboardFocusable UI Automation property to true..
        /// </summary>
        internal static string IsKeyboardFocusableFalseButDisabled {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableFalseButDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this element is still reachable via the keyboard even when it is off-screen, set the IsKeyboardFocusable UI Automation property to true..
        /// </summary>
        internal static string IsKeyboardFocusableFalseButOffscreen {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableFalseButOffscreen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ensure that this element can be manipulated via the keyboard, then set the IsKeyboardFocusable UI Automation property to true..
        /// </summary>
        internal static string IsKeyboardFocusableForCustomShouldBeTrue {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableForCustomShouldBeTrue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make this element focusable instead of its children..
        /// </summary>
        internal static string IsKeyboardFocusableForListItemShouldBeTrue {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableForListItemShouldBeTrue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this container should be discoverable by keyboard users, set the IsKeyboardFocusable UI Automation property to true. Otherwise, consider changing the ControlType..
        /// </summary>
        internal static string IsKeyboardFocusableOnEmptyContainer {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableOnEmptyContainer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the IsKeyboardFocusable UI Automation property to false. If this element really should be reachable via the keyboard, verify its ControlType..
        /// </summary>
        internal static string IsKeyboardFocusableShouldBeFalse {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableShouldBeFalse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the IsKeyboardFocusable UI Automation property to true..
        /// </summary>
        internal static string IsKeyboardFocusableShouldBeTrue {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableShouldBeTrue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the IsKeyboardFocusable UI Automation property to true..
        /// </summary>
        internal static string IsKeyboardFocusableTopLevelTextPattern {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableTopLevelTextPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a meaningful ItemStatus UI Automation property to this element..
        /// </summary>
        internal static string ItemStatusExists {
            get {
                return ResourceManager.GetString("ItemStatusExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If necessary, set the ItemType UI Automation property for this element..
        /// </summary>
        internal static string ItemTypeRecommended {
            get {
                return ResourceManager.GetString("ItemTypeRecommended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the banner element so it does not descend from any other landmark.
        ///      Exception: If a page has nested document or application roles, each nested document or application may have one banner landmark..
        /// </summary>
        internal static string LandmarkBannerIsTopLevel {
            get {
                return ResourceManager.GetString("LandmarkBannerIsTopLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the complementary landmark so it does not descend from any other landmark.
        ///      Exception: If a page has nested document or application roles, each nested document or application may have one complementary landmark..
        /// </summary>
        internal static string LandmarkComplementaryIsTopLevel {
            get {
                return ResourceManager.GetString("LandmarkComplementaryIsTopLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the contentinfo landmark so it does not descend from any other landmark.
        ///      Exception: If a page has nested document or application roles, each nested document or application may have one contentinfo landmark..
        /// </summary>
        internal static string LandmarkContentInfoIsTopLevel {
            get {
                return ResourceManager.GetString("LandmarkContentInfoIsTopLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the main landmark so it does not descend from any other landmark.
        ///      Exception: If a page has nested document or application roles, each nested document or application may have one main landmark..
        /// </summary>
        internal static string LandmarkMainIsTopLevel {
            get {
                return ResourceManager.GetString("LandmarkMainIsTopLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the banner landmark only once per page.
        ///      Exception: If a page has nested document or application roles, each nested document or application may have a banner landmark..
        /// </summary>
        internal static string LandmarkNoDuplicateBanner {
            get {
                return ResourceManager.GetString("LandmarkNoDuplicateBanner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the contentinfo landmark only once per page..
        /// </summary>
        internal static string LandmarkNoDuplicateContentInfo {
            get {
                return ResourceManager.GetString("LandmarkNoDuplicateContentInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide unique names for sibling list items..
        /// </summary>
        internal static string ListItemSiblingsUnique {
            get {
                return ResourceManager.GetString("ListItemSiblingsUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sufficient:
        ///Provide a string for the LocalizedControlType property that concisely describes the control&apos;s function or purpose.
        ///
        ///Better:
        ///If possible, use a predefined (non-custom) control type and the default localized control type. The UIA framework will provide the correct localized control type automatically..
        /// </summary>
        internal static string LocalizedControlTypeNotCustom {
            get {
                return ResourceManager.GetString("LocalizedControlTypeNotCustom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}
        ///    
        ///If your application targets a version of .NET Framework before 4.7.1, but is running on a system where .NET version 4.7.1 or higher is installed, you may be able to address this issue by taking advantage of accessibility enhancements in .NET 4.7.1. To do this, you will need to enable accessibility switches as described on the following page: https://docs.microsoft.com/en-us/dotnet/framework/whats-new/whats-new-in-accessibility#accessibility-switches.
        /// </summary>
        internal static string LocalizedControlTypeNotCustomWPFGridCell {
            get {
                return ResourceManager.GetString("LocalizedControlTypeNotCustomWPFGridCell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a string for the LocalizedControlType property that concisely describes the control&apos;s type..
        /// </summary>
        internal static string LocalizedControlTypeNotEmpty {
            get {
                return ResourceManager.GetString("LocalizedControlTypeNotEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a string for the LocalizedControlType property that concisely describes the control&apos;s type..
        /// </summary>
        internal static string LocalizedControlTypeNotNull {
            get {
                return ResourceManager.GetString("LocalizedControlTypeNotNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a string for the LocalizedControlType property that concisely describes the control&apos;s type..
        /// </summary>
        internal static string LocalizedControlTypeNotWhiteSpace {
            get {
                return ResourceManager.GetString("LocalizedControlTypeNotWhiteSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set a meaningful LocalizedControlType UI Automation property for this element..
        /// </summary>
        internal static string LocalizedControlTypeReasonable {
            get {
                return ResourceManager.GetString("LocalizedControlTypeReasonable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a string for the LocalizedLandmarkType property that contains at most 64 characters.
        ///Where appropriate, use a standard localized landmark type:
        /// · Use &quot;banner&quot; for an area at the beginning of the page with site-oriented content.
        /// · Use &quot;complementary&quot; for an area with supporting content that remains meaningful when separated from the primary content.
        /// · Use &quot;contentinfo&quot; for an area at the end of the page containing information about the site or the primary content.
        /// · Use &quot;form&quot; for an area co [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LocalizedLandmarkTypeIsReasonableLength {
            get {
                return ResourceManager.GetString("LocalizedLandmarkTypeIsReasonableLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide string for the LocalizedLandmarkType property that does not include &quot;custom.&quot;
        ///Where appropriate, use a standard localized landmark type:
        /// · Use &quot;banner&quot; for an area at the beginning of the page with site-oriented content.
        /// · Use &quot;complementary&quot; for an area with supporting content that remains meaningful when separated from the primary content.
        /// · Use &quot;contentinfo&quot; for an area at the end of the page containing information about the site or the primary content.
        /// · Use &quot;form&quot; for an area containin [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LocalizedLandmarkTypeNotCustom {
            get {
                return ResourceManager.GetString("LocalizedLandmarkTypeNotCustom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a string for the LocalizedLandmarkType property.
        ///Where appropriate, use a standard localized landmark type:
        /// · Use &quot;banner&quot; for an area at the beginning of the page with site-oriented content.
        /// · Use &quot;complementary&quot; for an area with supporting content that remains meaningful when separated from the primary content.
        /// · Use &quot;contentinfo&quot; for an area at the end of the page containing information about the site or the primary content.
        /// · Use &quot;form&quot; for an area containing a set of form-related eleme [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LocalizedLandmarkTypeNotEmpty {
            get {
                return ResourceManager.GetString("LocalizedLandmarkTypeNotEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a LocalizedLandmarkType property for the element.
        ///Where appropriate, use a standard localized landmark type:
        /// · Use &quot;banner&quot; for an area at the beginning of the page with site-oriented content.
        /// · Use &quot;complementary&quot; for an area with supporting content that remains meaningful when separated from the primary content.
        /// · Use &quot;contentinfo&quot; for an area at the end of the page containing information about the site or the primary content.
        /// · Use &quot;form&quot; for an area containing a set of form-related elem [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LocalizedLandmarkTypeNotNull {
            get {
                return ResourceManager.GetString("LocalizedLandmarkTypeNotNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a string for the LocalizedLandmarkType property.
        ///Where appropriate, use a standard localized landmark type:
        /// · Use &quot;banner&quot; for an area at the beginning of the page with site-oriented content.
        /// · Use &quot;complementary&quot; for an area with supporting content that remains meaningful when separated from the primary content.
        /// · Use &quot;contentinfo&quot; for an area at the end of the page containing information about the site or the primary content.
        /// · Use &quot;form&quot; for an area containing a set of form-related eleme [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LocalizedLandmarkTypeNotWhiteSpace {
            get {
                return ResourceManager.GetString("LocalizedLandmarkTypeNotWhiteSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the UI Automation Name property for the given element..
        /// </summary>
        internal static string NameEmptyButElementNotKeyboardFocusable {
            get {
                return ResourceManager.GetString("NameEmptyButElementNotKeyboardFocusable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a UI Automation Name property for the element that:
        /// · Concisely identifies the element, AND
        /// · Does not include the control type..
        /// </summary>
        internal static string NameExcludesControlType {
            get {
                return ResourceManager.GetString("NameExcludesControlType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a UI Automation Name property for the element that:
        /// · Concisely identifies the element, AND
        /// · Does not include the same text as the element&apos;s LocalizedControlType property..
        /// </summary>
        internal static string NameExcludesLocalizedControlType {
            get {
                return ResourceManager.GetString("NameExcludesLocalizedControlType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a UI Automation Name property for the element that:
        /// · Concisely identifies the element, AND
        /// · Does not include the element&apos;s class name (such as Microsoft.*.* or Windows.*.*)..
        /// </summary>
        internal static string NameIsInformative {
            get {
                return ResourceManager.GetString("NameIsInformative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the UI Automation Name property of this element to be null or empty if the element has no siblings of the same type..
        /// </summary>
        internal static string NameNoSiblingsOfSameType {
            get {
                return ResourceManager.GetString("NameNoSiblingsOfSameType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a UI Automation Name property that concisely identifies the element..
        /// </summary>
        internal static string NameNotEmpty {
            get {
                return ResourceManager.GetString("NameNotEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a UI Automation Name property that concisely identifies the element..
        /// </summary>
        internal static string NameNotNull {
            get {
                return ResourceManager.GetString("NameNotNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a UI Automation Name property that concisely identifies the element..
        /// </summary>
        internal static string NameNotWhiteSpace {
            get {
                return ResourceManager.GetString("NameNotWhiteSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the UI Automation Name property for the given element..
        /// </summary>
        internal static string NameNullButElementNotKeyboardFocusable {
            get {
                return ResourceManager.GetString("NameNullButElementNotKeyboardFocusable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the UI Automation Name property of this custom control to be empty..
        /// </summary>
        internal static string NameOnCustomWithParentWPFDataItem {
            get {
                return ResourceManager.GetString("NameOnCustomWithParentWPFDataItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove the UI Automation Name property for this element..
        /// </summary>
        internal static string NameOnOptionalType {
            get {
                return ResourceManager.GetString("NameOnOptionalType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a UI Automation Name property for the element that:
        /// · Concisely identifies the element, AND
        /// · Contains at most 512 characters..
        /// </summary>
        internal static string NameReasonableLength {
            get {
                return ResourceManager.GetString("NameReasonableLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the UI Automation Name property to have a valid BoundingRectangle (i.e. the BoundingRectangle is not null and has area)..
        /// </summary>
        internal static string NameWithValidBoundingRectangle {
            get {
                return ResourceManager.GetString("NameWithValidBoundingRectangle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide an Orientation property for the element..
        /// </summary>
        internal static string OrientationPropertyExists {
            get {
                return ResourceManager.GetString("OrientationPropertyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide unique names for controls that have a parent/child relationship and the same ControlType property..
        /// </summary>
        internal static string ParentChildShouldNotHaveSameNameAndLocalizedControlType {
            get {
                return ResourceManager.GetString("ParentChildShouldNotHaveSameNameAndLocalizedControlType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implement the progress bar&apos;s RangeValue pattern using the following properties and values:
        /// · Minimum: 0.0
        /// · Maximum: 100.0
        /// · IsReadOnly: TRUE.
        /// </summary>
        internal static string ProgressBarRangeValue {
            get {
                return ResourceManager.GetString("ProgressBarRangeValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the {0} property, removing all characters in the range U+E000 to U+F8FF and replace them with meaningful, standard text content..
        /// </summary>
        internal static string PropertyExcludesPrivateUnicodeCharacters {
            get {
                return ResourceManager.GetString("PropertyExcludesPrivateUnicodeCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do one of the following:
        /// 1. Modify the element and/or its siblings so that only one of them is selected at any given time, OR
        /// 2. Modify the parent element so its CanSelectMultiple property is TRUE..
        /// </summary>
        internal static string SelectionItemPatternSingleSelection {
            get {
                return ResourceManager.GetString("SelectionItemPatternSingleSelection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the element&apos;s IsSelectionRequired property of the SelectionPattern to TRUE..
        /// </summary>
        internal static string SelectionPatternSelectionRequired {
            get {
                return ResourceManager.GetString("SelectionPatternSelectionRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Make sure the element has the appropriate ControlType property for its function.
        ///2. Make sure Selection is the correct pattern.
        ///3. Set the element&apos;s CanSelectMultiple property to FALSE..
        /// </summary>
        internal static string SelectionPatternSingleSelection {
            get {
                return ResourceManager.GetString("SelectionPatternSingleSelection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide unique names for sibling controls that have the same ControlType property..
        /// </summary>
        internal static string SiblingUniqueAndFocusable {
            get {
                return ResourceManager.GetString("SiblingUniqueAndFocusable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Verify that each element has a meaningful UI Automation Name property..
        /// </summary>
        internal static string SiblingUniqueAndNotFocusable {
            get {
                return ResourceManager.GetString("SiblingUniqueAndNotFocusable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the split button to support exactly one of the following patterns:
        /// · Support the Invoke pattern if the button performs a command at the request of the user.
        /// · Support the Toggle pattern if the button can cycle through a series of up to three states..
        /// </summary>
        internal static string SplitButtonInvokeAndTogglePatterns {
            get {
                return ResourceManager.GetString("SplitButtonInvokeAndTogglePatterns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the element to conform to the following structure: {0}..
        /// </summary>
        internal static string Structure {
            get {
                return ResourceManager.GetString("Structure", resourceCulture);
            }
        }
    }
}
