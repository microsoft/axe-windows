//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Axe.Windows.Rules.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Descriptions {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Descriptions() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Axe.Windows.Rules.Resources.Descriptions", typeof(Descriptions).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element&apos;s BoundingRectangle must not obscure its container element..
        /// </summary>
        internal static string BoundingRectangleCompletelyObscuresContainer {
            get {
                return ResourceManager.GetString("BoundingRectangleCompletelyObscuresContainer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element&apos;s BoundingRectangle must be contained within its parent element..
        /// </summary>
        internal static string BoundingRectangleContainedInParent {
            get {
                return ResourceManager.GetString("BoundingRectangleContainedInParent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BoundingRectangle property must return a valid rectangle..
        /// </summary>
        internal static string BoundingRectangleDataFormatCorrect {
            get {
                return ResourceManager.GetString("BoundingRectangleDataFormatCorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BoundingRectangle property must not be defined as [0,0,0,0].
        /// </summary>
        internal static string BoundingRectangleNotAllZeros {
            get {
                return ResourceManager.GetString("BoundingRectangleNotAllZeros", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An onscreen element must not have a null BoundingRectangle property..
        /// </summary>
        internal static string BoundingRectangleNotNull {
            get {
                return ResourceManager.GetString("BoundingRectangleNotNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BoundingRectangle property is not valid, but the element is off-screen..
        /// </summary>
        internal static string BoundingRectangleNotValidButOffScreen {
            get {
                return ResourceManager.GetString("BoundingRectangleNotValidButOffScreen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BoundingRectangle property of a menubar in UWP may have a null or empty value..
        /// </summary>
        internal static string BoundingRectangleOnUWPMenuBar {
            get {
                return ResourceManager.GetString("BoundingRectangleOnUWPMenuBar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BoundingRectangle property of a menu item in UWP may have a null or empty value..
        /// </summary>
        internal static string BoundingRectangleOnUWPMenuItem {
            get {
                return ResourceManager.GetString("BoundingRectangleOnUWPMenuItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BoundingRectangle property of a given element in the WPF framework whose parent is of type text may have a null or empty value..
        /// </summary>
        internal static string BoundingRectangleOnWPFTextParent {
            get {
                return ResourceManager.GetString("BoundingRectangleOnWPFTextParent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BoundingRectangle property must represent an area of at least 25 pixels..
        /// </summary>
        internal static string BoundingRectangleSizeReasonable {
            get {
                return ResourceManager.GetString("BoundingRectangleSizeReasonable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A button may have the Invoke and ExpandCollapse patterns together, but it is not recommended. If possible, please have only one of them. .
        /// </summary>
        internal static string ButtonInvokeAndExpandCollapsePatterns {
            get {
                return ResourceManager.GetString("ButtonInvokeAndExpandCollapsePatterns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A button must not support both the Invoke and Toggle patterns..
        /// </summary>
        internal static string ButtonInvokeAndTogglePatterns {
            get {
                return ResourceManager.GetString("ButtonInvokeAndTogglePatterns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A button must support one of these patterns: Invoke, Toggle, or ExpandCollapse..
        /// </summary>
        internal static string ButtonShouldHavePatterns {
            get {
                return ResourceManager.GetString("ButtonShouldHavePatterns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A button must not support both the Toggle and ExpandCollapse patterns..
        /// </summary>
        internal static string ButtonToggleAndExpandCollapsePatterns {
            get {
                return ResourceManager.GetString("ButtonToggleAndExpandCollapsePatterns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A button element should only support one of Invoke, Toggle, or ExpandCollapse patterns when a splitbutton is the parent. .
        /// </summary>
        internal static string ButtonWithSplitButtonParentPattern {
            get {
                return ResourceManager.GetString("ButtonWithSplitButtonParentPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A separator must not have any children with IsContentElement set to TRUE..
        /// </summary>
        internal static string ChildrenNotAllowedInContentView {
            get {
                return ResourceManager.GetString("ChildrenNotAllowedInContentView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A combo box should not support the Scroll pattern. This rule may be reported as a warning because some platforms have combo boxes support the scroll pattern by default, which app developers can&apos;t easily fix..
        /// </summary>
        internal static string ComboBoxShouldNotSupportScrollPattern {
            get {
                return ResourceManager.GetString("ComboBoxShouldNotSupportScrollPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given ControlType must not support the Invoke pattern..
        /// </summary>
        internal static string ControlShouldNotSupportInvokePattern {
            get {
                return ResourceManager.GetString("ControlShouldNotSupportInvokePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given ControlType must not support the Scroll pattern..
        /// </summary>
        internal static string ControlShouldNotSupportScrollPattern {
            get {
                return ResourceManager.GetString("ControlShouldNotSupportScrollPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given ControlType must not support the Table pattern..
        /// </summary>
        internal static string ControlShouldNotSupportTablePattern {
            get {
                return ResourceManager.GetString("ControlShouldNotSupportTablePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given ControlType must not support the Toggle pattern..
        /// </summary>
        internal static string ControlShouldNotSupportTogglePattern {
            get {
                return ResourceManager.GetString("ControlShouldNotSupportTogglePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given type should not support the Value pattern..
        /// </summary>
        internal static string ControlShouldNotSupportValuePattern {
            get {
                return ResourceManager.GetString("ControlShouldNotSupportValuePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given type should not support the Window pattern..
        /// </summary>
        internal static string ControlShouldNotSupportWindowPattern {
            get {
                return ResourceManager.GetString("ControlShouldNotSupportWindowPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given ControlType must support the ExpandCollapse pattern..
        /// </summary>
        internal static string ControlShouldSupportExpandCollapsePattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportExpandCollapsePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element whose parent supports the Grid pattern must support the GridItem pattern..
        /// </summary>
        internal static string ControlShouldSupportGridItemPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportGridItemPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given ControlType must support the Grid pattern..
        /// </summary>
        internal static string ControlShouldSupportGridPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportGridPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given ControlType must support the Invoke pattern..
        /// </summary>
        internal static string ControlShouldSupportInvokePattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportInvokePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element whose parent supports the Scroll pattern must support the ScrollItem pattern..
        /// </summary>
        internal static string ControlShouldSupportScrollItemPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportScrollItemPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given ControlType must support the SelectionItem pattern..
        /// </summary>
        internal static string ControlShouldSupportSelectionItemPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportSelectionItemPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given ControlType must support the Selection pattern..
        /// </summary>
        internal static string ControlShouldSupportSelectionPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportSelectionPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The element&apos;s ControlType requires valid values for SizeOfSet and PositionInSet..
        /// </summary>
        internal static string ControlShouldSupportSetInfo {
            get {
                return ResourceManager.GetString("ControlShouldSupportSetInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element whose parent supports the Spreadsheet pattern must support the SpreadsheetItem pattern..
        /// </summary>
        internal static string ControlShouldSupportSpreadsheetItemPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportSpreadsheetItemPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element whose parent supports the Table pattern must support the TableItem pattern..
        /// </summary>
        internal static string ControlShouldSupportTableItemPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportTableItemPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given ControlType must support the Table pattern..
        /// </summary>
        internal static string ControlShouldSupportTablePattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportTablePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given ControlType must support the Text pattern..
        /// </summary>
        internal static string ControlShouldSupportTextPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportTextPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given ControlType must support the Toggle pattern..
        /// </summary>
        internal static string ControlShouldSupportTogglePattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportTogglePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element that can be resized must support the Transform pattern..
        /// </summary>
        internal static string ControlShouldSupportTransformPattern {
            get {
                return ResourceManager.GetString("ControlShouldSupportTransformPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RangeValue pattern of an edit control must have a null LargeChange property..
        /// </summary>
        internal static string EditSupportsIncorrectRangeValuePattern {
            get {
                return ResourceManager.GetString("EditSupportsIncorrectRangeValuePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is best when Edit controls support the Text pattern. The Value pattern is acceptable, but much less accessible..
        /// </summary>
        internal static string EditSupportsOnlyValuePattern {
            get {
                return ResourceManager.GetString("EditSupportsOnlyValuePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element&apos;s HeadingLevel must be greater than or equal to that of its ancestors..
        /// </summary>
        internal static string HeadingLevelDescendsWhenNested {
            get {
                return ResourceManager.GetString("HeadingLevelDescendsWhenNested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HelpText property of an element must not be the same as the element&apos;s Name property..
        /// </summary>
        internal static string HelpTextNotEqualToName {
            get {
                return ResourceManager.GetString("HelpTextNotEqualToName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The recommended value of the IsContentElement property for the given control type is false. Please consider if this is an element that should be reported to an assistive technology user as content..
        /// </summary>
        internal static string IsContentElementFalseOptional {
            get {
                return ResourceManager.GetString("IsContentElementFalseOptional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given ControlType must have a non-null IsContentElement property..
        /// </summary>
        internal static string IsContentElementPropertyExists {
            get {
                return ResourceManager.GetString("IsContentElementPropertyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The recommended value of the IsContentElement property for the given control type is true. Please consider if this is an element that should be reported to an assistive technology user as content..
        /// </summary>
        internal static string IsContentElementTrueOptional {
            get {
                return ResourceManager.GetString("IsContentElementTrueOptional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given ControlType must have a non-null IsControlElement property..
        /// </summary>
        internal static string IsControlElementPropertyExists {
            get {
                return ResourceManager.GetString("IsControlElementPropertyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The recommended value of the IsControlElement property for the given control type is true. Please consider if this is an element that should be reported to an assistive technology user as a control. Note that almost all controls are required to have the IsControl Property set to true..
        /// </summary>
        internal static string IsControlElementTrueOptional {
            get {
                return ResourceManager.GetString("IsControlElementTrueOptional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given ControlType must have the IsControlElement property set to TRUE..
        /// </summary>
        internal static string IsControlElementTrueRequired {
            get {
                return ResourceManager.GetString("IsControlElementTrueRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IsKeyboardFocusable property may be false when the given element supports the text pattern and is the descendant of an element that also supports the text pattern. Please consider if the given element should or should not be focusable..
        /// </summary>
        internal static string IsKeyboardFocusableDescendantTextPattern {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableDescendantTextPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IsKeyboardFocusable property is false for an element where it would normally be true. However, the IsEnabled property on the element is also false, so the value of IsKeyboardFocusable may be acceptable..
        /// </summary>
        internal static string IsKeyboardFocusableFalseButDisabled {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableFalseButDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IsKeyboardFocusable property for the given element is false for an element where it would normally be true. However, the IsOffscreen property on the element is true, so the value of IsKeyboardFocusable may be acceptable..
        /// </summary>
        internal static string IsKeyboardFocusableFalseButOffscreen {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableFalseButOffscreen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IsKeyboardFocusable property for a custome element should be true when the element supports actionable patterns..
        /// </summary>
        internal static string IsKeyboardFocusableForCustomShouldBeTrue {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableForCustomShouldBeTrue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IsKeyboardFocusable property for the given list item is false, but the element has children that are focusable. The element should probably be focusable instead of its children..
        /// </summary>
        internal static string IsKeyboardFocusableForListItemShouldBeTrue {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableForListItemShouldBeTrue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IsKeyboardFocusable property should be true when you want an empty container to be discoverable by assistive technology users. IsKeyboardFocusable may be false when you want an empty container not to be discoverable by AT users..
        /// </summary>
        internal static string IsKeyboardFocusableOnEmptyContainer {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableOnEmptyContainer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IsKeyboardFocusable property for the given element is expected to be false because of the element&apos;s control type..
        /// </summary>
        internal static string IsKeyboardFocusableShouldBeFalse {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableShouldBeFalse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IsKeyboardFocusable property for the given element should be true based on its control type..
        /// </summary>
        internal static string IsKeyboardFocusableShouldBeTrue {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableShouldBeTrue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IsKeyboardFocusable property should be true for an element that supports the text pattern, is not a descendant of an element that supports the text pattern, and which supports text selection..
        /// </summary>
        internal static string IsKeyboardFocusableTopLevelTextPattern {
            get {
                return ResourceManager.GetString("IsKeyboardFocusableTopLevelTextPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ItemStatus property for the given element should exist..
        /// </summary>
        internal static string ItemStatusExists {
            get {
                return ResourceManager.GetString("ItemStatusExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ItemType property for the given element has no content, and the element has a child image. Please consider including an item type so that assistive technology users can obtain the information provided by the image. If this information is already provided in another way, the item type may not be necessary..
        /// </summary>
        internal static string ItemTypeRecommended {
            get {
                return ResourceManager.GetString("ItemTypeRecommended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element with LocalizedLandmarkType &quot;banner&quot; must not descend from another landmark..
        /// </summary>
        internal static string LandmarkBannerIsTopLevel {
            get {
                return ResourceManager.GetString("LandmarkBannerIsTopLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element with LocalizedLandmarkType &quot;complementary&quot; must not descend from another landmark..
        /// </summary>
        internal static string LandmarkComplementaryIsTopLevel {
            get {
                return ResourceManager.GetString("LandmarkComplementaryIsTopLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element with LocalizedLandmarkType &quot;contentinfo&quot; must not descend from another landmark..
        /// </summary>
        internal static string LandmarkContentInfoIsTopLevel {
            get {
                return ResourceManager.GetString("LandmarkContentInfoIsTopLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element with LocalizedLandmarkType &quot;main&quot; must not descend from another landmark..
        /// </summary>
        internal static string LandmarkMainIsTopLevel {
            get {
                return ResourceManager.GetString("LandmarkMainIsTopLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A page must not have multiple elements with LocalizedLandmarkType &quot;banner.&quot;.
        /// </summary>
        internal static string LandmarkNoDuplicateBanner {
            get {
                return ResourceManager.GetString("LandmarkNoDuplicateBanner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A page must not have multiple elements with LocalizedLandmarkType &quot;contentinfo.&quot;.
        /// </summary>
        internal static string LandmarkNoDuplicateContentInfo {
            get {
                return ResourceManager.GetString("LandmarkNoDuplicateContentInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A page must have exactly one element with the LocalizedLandmarkType &quot;main.&quot;.
        /// </summary>
        internal static string LandmarkOneMain {
            get {
                return ResourceManager.GetString("LandmarkOneMain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name property of sibling list items should be unique..
        /// </summary>
        internal static string ListItemSiblingsUnique {
            get {
                return ResourceManager.GetString("ListItemSiblingsUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ControlType and LocalizedControlType must not both be set to &quot;custom.&quot;.
        /// </summary>
        internal static string LocalizedControlTypeNotCustom {
            get {
                return ResourceManager.GetString("LocalizedControlTypeNotCustom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LocalizedControlType property must not be an empty string..
        /// </summary>
        internal static string LocalizedControlTypeNotEmpty {
            get {
                return ResourceManager.GetString("LocalizedControlTypeNotEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LocalizedControlType property must not be null..
        /// </summary>
        internal static string LocalizedControlTypeNotNull {
            get {
                return ResourceManager.GetString("LocalizedControlTypeNotNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LocalizedControlType property must not contain only white space..
        /// </summary>
        internal static string LocalizedControlTypeNotWhiteSpace {
            get {
                return ResourceManager.GetString("LocalizedControlTypeNotWhiteSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The localized control type should be reasonable based on ControlTypeId..
        /// </summary>
        internal static string LocalizedControlTypeReasonable {
            get {
                return ResourceManager.GetString("LocalizedControlTypeReasonable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LocalizedLandmarkType property must not contain any special characters..
        /// </summary>
        internal static string LocalizedLandmarkTypeExcludesSpecialCharacters {
            get {
                return ResourceManager.GetString("LocalizedLandmarkTypeExcludesSpecialCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LocalizedLandmarkType property must not be longer than 64 characters..
        /// </summary>
        internal static string LocalizedLandmarkTypeIsReasonableLength {
            get {
                return ResourceManager.GetString("LocalizedLandmarkTypeIsReasonableLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LandmarkType and LocalizedLandmarkType must not both be set to &quot;custom.&quot;.
        /// </summary>
        internal static string LocalizedLandmarkTypeNotCustom {
            get {
                return ResourceManager.GetString("LocalizedLandmarkTypeNotCustom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element with LandmarkType set must not have an empty LocalizedLandmarkType..
        /// </summary>
        internal static string LocalizedLandmarkTypeNotEmpty {
            get {
                return ResourceManager.GetString("LocalizedLandmarkTypeNotEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element with LandmarkType set must not have a null LocalizedLandmarkType..
        /// </summary>
        internal static string LocalizedLandmarkTypeNotNull {
            get {
                return ResourceManager.GetString("LocalizedLandmarkTypeNotNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LocalizedLandmarkType property must not contain only white space..
        /// </summary>
        internal static string LocalizedLandmarkTypeNotWhiteSpace {
            get {
                return ResourceManager.GetString("LocalizedLandmarkTypeNotWhiteSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name property for the given element is empty, but the element isn&apos;t focusable. Please consider whether or not the element should have a name..
        /// </summary>
        internal static string NameEmptyButElementNotKeyboardFocusable {
            get {
                return ResourceManager.GetString("NameEmptyButElementNotKeyboardFocusable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name property must not include the element&apos;s control type..
        /// </summary>
        internal static string NameExcludesControlType {
            get {
                return ResourceManager.GetString("NameExcludesControlType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name must not include the same text as the LocalizedControlType..
        /// </summary>
        internal static string NameExcludesLocalizedControlType {
            get {
                return ResourceManager.GetString("NameExcludesLocalizedControlType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name property must not contain any special characters..
        /// </summary>
        internal static string NameExcludesSpecialCharacters {
            get {
                return ResourceManager.GetString("NameExcludesSpecialCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name property must not include its class name..
        /// </summary>
        internal static string NameIsInformative {
            get {
                return ResourceManager.GetString("NameIsInformative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name property of the given element may be null or empty if the element has no siblings of the same type..
        /// </summary>
        internal static string NameNoSiblingsOfSameType {
            get {
                return ResourceManager.GetString("NameNoSiblingsOfSameType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name property of a focusable element must not be an empty string..
        /// </summary>
        internal static string NameNotEmpty {
            get {
                return ResourceManager.GetString("NameNotEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name property of a focusable element must not be null..
        /// </summary>
        internal static string NameNotNull {
            get {
                return ResourceManager.GetString("NameNotNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name property must not contain only space characters..
        /// </summary>
        internal static string NameNotWhiteSpace {
            get {
                return ResourceManager.GetString("NameNotWhiteSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name property for the given element is null, but the element isn&apos;t focusable. Please consider whether or not the element should have a name..
        /// </summary>
        internal static string NameNullButElementNotKeyboardFocusable {
            get {
                return ResourceManager.GetString("NameNullButElementNotKeyboardFocusable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name property of a custom control may be empty if the parent is a wpf dataitem..
        /// </summary>
        internal static string NameOnCustomWithParentWPFDataItem {
            get {
                return ResourceManager.GetString("NameOnCustomWithParentWPFDataItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name property for the given element type is optional..
        /// </summary>
        internal static string NameOnOptionalType {
            get {
                return ResourceManager.GetString("NameOnOptionalType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name property must not be longer than 512 characters..
        /// </summary>
        internal static string NameReasonableLength {
            get {
                return ResourceManager.GetString("NameReasonableLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An interactive element with a valid name property is usually expected to have a valid bounding rectangle that is not null and has area..
        /// </summary>
        internal static string NameWithValidBoundingRectangle {
            get {
                return ResourceManager.GetString("NameWithValidBoundingRectangle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controls that can be horizontal or vertical must support the Orientation property..
        /// </summary>
        internal static string OrientationPropertyExists {
            get {
                return ResourceManager.GetString("OrientationPropertyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element must not have the same Name and LocalizedControlType as its parent..
        /// </summary>
        internal static string ParentChildShouldNotHaveSameNameAndLocalizedControlType {
            get {
                return ResourceManager.GetString("ParentChildShouldNotHaveSameNameAndLocalizedControlType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RangeValue pattern of a progress bar must have specific Minimum, Maximum, and IsReadOnly values..
        /// </summary>
        internal static string ProgressBarRangeValue {
            get {
                return ResourceManager.GetString("ProgressBarRangeValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element whose parent supports single selection must not have selected siblings..
        /// </summary>
        internal static string SelectionItemPatternSingleSelection {
            get {
                return ResourceManager.GetString("SelectionItemPatternSingleSelection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given ControlType must have the IsSelectionRequired property set to TRUE..
        /// </summary>
        internal static string SelectionPatternSelectionRequired {
            get {
                return ResourceManager.GetString("SelectionPatternSelectionRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of the given ControlType must not support multiple selection..
        /// </summary>
        internal static string SelectionPatternSingleSelection {
            get {
                return ResourceManager.GetString("SelectionPatternSingleSelection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Focusable sibling elements must not have the same Name and LocalizedControlType..
        /// </summary>
        internal static string SiblingUniqueAndFocusable {
            get {
                return ResourceManager.GetString("SiblingUniqueAndFocusable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given element has siblings with the same Name and LocalizedControlType..
        /// </summary>
        internal static string SiblingUniqueAndNotFocusable {
            get {
                return ResourceManager.GetString("SiblingUniqueAndNotFocusable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A split button must not support both the Invoke and Toggle patterns..
        /// </summary>
        internal static string SplitButtonInvokeAndTogglePatterns {
            get {
                return ResourceManager.GetString("SplitButtonInvokeAndTogglePatterns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given element is expected to have the following structure: {0}..
        /// </summary>
        internal static string Structure {
            get {
                return ResourceManager.GetString("Structure", resourceCulture);
            }
        }
    }
}
