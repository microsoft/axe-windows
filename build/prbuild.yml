name: $(date:yyyy-MM-dd)$(rev:.rr)
trigger: none
pr: none
variables:
  BuildPlatform: 'x86'
  CreateAxeWindowsNugetPackage: 'true'
  CreateAxeWindowsZippedCLI: 'true'
  PublicRelease: 'false'
  SignAppForRelease: 'false'

jobs:
- job: Release
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet 5.x'
    inputs:
      versionSpec: '5.x'

  - task: NuGetCommand@2
    displayName: 'NuGet restore'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: restore
      projects: |
        **\*.csproj

  - task: PowerShell@2
    displayName: 'License Header Check'
    inputs:
      targetType: "filePath"
      filePath: tools\scripts\verification.scripts\LicenseHeaderVerification.ps1
      arguments: '-target  $(Build.Repository.LocalPath) -licenseHeaderPath tools\scripts\verification.scripts\LicenseHeader.txt -extensions *.xaml,*.xml,*.cs,*.ps1 -addIfAbsent $false'

  - task: VSBuild@1
    displayName: 'Build Solution **\*.sln'
    inputs:
      vsVersion: 16.0
      platform: '$(BuildPlatform)'
      configuration: release

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      Contents: '**\bin\release\**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'

  - task: DotNetCoreCLI@2
    displayName: 'Test Assemblies (.NET Core) **\*test*.csproj'
    inputs:
      arguments: --no-build --blame --verbosity normal --configuration release
      command: test
      projects: |
        **\*test*.csproj

- job: Debug
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet 5.x'
    inputs:
      versionSpec: '5.x'

  - task: NuGetCommand@2
    displayName: 'NuGet restore'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: restore
      projects: |
        **\*.csproj

  - task: VSBuild@1
    displayName: 'Build Solution **\*.sln'
    inputs:
      vsVersion: 16.0
      platform: '$(BuildPlatform)'
      configuration: debug

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      Contents: '**\bin\debug\**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'

  - task: DotNetCoreCLI@2
    displayName: 'Test Assemblies (.NET Core) **\*test*.csproj'
    inputs:
      arguments: --no-build --blame --verbosity normal --configuration debug /p:CollectCoverage=true /p:CoverletOutput=./CodeCoverage/ /p:CoverletOutputFormat=cobertura
      command: test
      projects: |
        **\*test*.csproj

  # Run a command line script using Bash on Linux and macOS and cmd.exe on Windows
  - task: CmdLine@2
    displayName: 'Upload coverage to codecov.io'
    inputs:
      script: $(USERPROFILE)\.nuget\packages\codecov\$(CODECOV_VERSION)\tools\win7-x86\codecov.exe -t $(CODECOV_TOKEN) -f **/*coverage.cobertura.xml
    #workingDirectory: # Optional
    #failOnStderr: false # Optional
    