# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
# This pipeline will be extended to the OneESPT template
# If you are not using the E+D shared hosted pool with windows-2022, replace the pool section with your hosted pool, os, and image name. If you are using a Linux image, you must specify an additional windows image for SDL: https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/sdlanalysis/overview#how-to-specify-a-windows-pool-for-the-sdl-source-analysis-stage
# The Task 'PublishBuildArtifacts@1' has been converted to an output named 'Publish Artifact: Compliance' in the templateContext section.
# The Task 'PublishBuildArtifacts@1' has been converted to an output named 'Publish Artifact: Compliance' in the templateContext section.
# The Task 'PublishBuildArtifacts@1' has been converted to an output named 'Publish Artifact: NuGet package' in the templateContext section.
# The Task 'PublishBuildArtifacts@1' has been converted to an output named 'Publish Artifact: Rules markdown' in the templateContext section.
# The Task 'PublishBuildArtifacts@1' has been converted to an output named 'Publish Artifact: CLI (msi)' in the templateContext section.
# The Task 'PublishBuildArtifacts@1' has been converted to an output named 'Publish Artifact: CLI (zip)' in the templateContext section.
name: $(date:yyyy-MM-dd)$(rev:.rr)
trigger: none
pr: none

parameters:
- name: LocLanguages
  displayName: Localization Languages
  type: string
  default: VS
variables:
- name: BuildPlatform
  value: 'x86'
- name: CreateAxeWindowsNugetPackage
  value: 'true'
- name: CreateAxeWindowsZippedCLI
  value: 'true'
- name: PublicRelease
  value: 'false'
- name: SignAppForRelease
  value: 'false'
- name: MicroBuild_NuPkgSigningEnabled
  value: 'false'
- name: TeamName
  value: 'Axe Windows'
- name: system.debug
  value: 'true'
- name: runCodesignValidationInjection
  value: 'false'
- name: isMain
  value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: a11y-insights-pool-prod
      image: windows-2022-secure
      os: windows
    customBuildTags:
    - ES365AIMigrationTooling
    stages:
    - stage: __default
      jobs:

      - job: ComplianceRelease
        steps:
        - task: NuGetToolInstaller@1
          displayName: 'Use NuGet 5.x'
          inputs:
            versionSpec: '5.x'
        - task: NuGetCommand@2
          displayName: 'NuGet restore'
        - task: DotNetCoreCLI@2
          displayName: 'dotnet restore'
          inputs:
            command: restore
            projects: |
              **\*.csproj
        - task: PowerShell@2
          displayName: 'License Header Check'
          inputs:
            targetType: "filePath"
            filePath: tools\scripts\verification.scripts\LicenseHeaderVerification.ps1
            arguments: '-target  $(Build.Repository.LocalPath) -licenseHeaderPath tools\scripts\verification.scripts\LicenseHeader.txt -extensions *.xaml,*.xml,*.cs,*.ps1 -addIfAbsent $false'
        - task: VSBuild@1
          displayName: 'Build Solution **\*.sln'
          inputs:
            vsVersion: 17.0
            platform: '$(BuildPlatform)'
            configuration: release
        - task: ms.build-release-task.custom-build-release-task.wpf-static-analysis@0
          displayName: 'WPF Static Analysis'
          inputs:
            input: 'src\Axe.Windows\bin\Release'
        - task: DotNetCoreCLI@2
          displayName: 'Test Assemblies (.NET Core) **\*test*.csproj'
          inputs:
            arguments: --no-build --blame --verbosity normal --configuration release
            command: test
            projects: |
              **\*test*.csproj
        - task: CopyFiles@2
          displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
          inputs:
            Contents: '**\bin\release\**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
#        templateContext:
#          outputs:
#          - output: pipelineArtifact
#            displayName: 'Publish Artifact: Compliance'
#            artifactName: 'Compliance'

      - job: ComplianceDebug
        steps:
        - task: NuGetToolInstaller@1
          displayName: 'Use NuGet 5.x'
          inputs:
            versionSpec: '5.x'
        - task: NuGetCommand@2
          displayName: 'NuGet restore'
        - task: DotNetCoreCLI@2
          displayName: 'dotnet restore'
          inputs:
            command: restore
            projects: |
              **\*.csproj
        - task: VSBuild@1
          displayName: 'Build Solution **\*.sln'
          inputs:
            vsVersion: 17.0
            platform: '$(BuildPlatform)'
            configuration: debug
        - task: DotNetCoreCLI@2
          displayName: 'Test Assemblies (.NET Core) **\*test*.csproj'
          inputs:
            arguments: --no-build --blame --verbosity normal --configuration debug
            command: test
            projects: |
              **\*test*.csproj
        - task: UseDotNet@2
          displayName: (Roslyn pre-req) Use .NET 6.0
          inputs:
            packageType: 'sdk'
            version: '6.0.x'
        - task: DotNetCoreCLI@2
          displayName: '(Roslyn pre-req) Partial dotnet restore'
          inputs:
            command: restore
            projects: $(Build.SourcesDirectory)\src\CLI_Full\CLI_Full.csproj
            arguments: '--runtime win7-x86'
        - task: PowerShell@2
          displayName: 'Create tsa.config file (CredScan, Roslyn, and PoliCheck)'
          inputs:
            targetType: "filePath"
            filePath: tools\scripts\pipeline\build\create-tsa-config.ps1
            arguments: '-InstanceUrl "$(TSAInstanceUrl)" -ProjectName "$(TSAProjectName)" -CodeBaseAdmins "$(TSACodeBaseAdmins)" -AreaPath "$(TSAAreaPath)" -IterationPath "$(TSAIterationPath)" -NotificationAliases "$(TSANotificationAlias)" -Tools "CredScan;RoslynAnalyzers;PoliCheck" -OutputFile "$(Build.SourcesDirectory)\tsa.config"'
        - task: CopyFiles@2
          displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
          inputs:
            Contents: '**\bin\debug\**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
#        templateContext:
#          outputs:
#          - output: pipelineArtifact
#            displayName: 'Publish Artifact: Compliance'
#           artifactName: 'Compliance'

      - job: SignedRelease
        dependsOn:
        - ComplianceRelease
        - ComplianceDebug
        condition: and(succeeded(), succeeded())
        variables:
        - name: PublicRelease
          value: 'true'
#        - name: MicroBuild_NuPkgSigningEnabled
#          value: 'true'
#        - name: SignAppForRelease
#          value: 'true'
#        - name: runCodesignValidationInjection
#          value: 'true'
#        - name: GDN_CODESIGN_TARGETDIRECTORY
#          value: '$(Build.ArtifactStagingDirectory)\SigningValidation'
#          value: 'true'
        steps:
#        - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@4
#          displayName: 'Install Signing Plugin'
#          inputs:
#            signType: real
#            esrpSigning: true
#            feedSource: '$(MicrobuildPluginFeedSource)'
#          condition: and(succeeded(), ne(variables['SignType'], ''))
        - task: NuGetToolInstaller@1
          displayName: 'Use NuGet 5.x'
          inputs:
            versionSpec: '5.x'
#        - task: MicroBuildLocalizationPlugin@1
#          inputs:
#            languages: VS
#            feedSource: '$(MicrobuildPluginFeedSource)'
#          displayName: Install MicroBuild Localization plugin
        - task: NuGetCommand@2
          displayName: 'NuGet restore'
        - task: DotNetCoreCLI@2
          displayName: 'dotnet restore'
          inputs:
            command: restore
            projects: |
              **\*.csproj
        - task: msospo.ospo-extension.8d7f9abb-6896-461d-9e25-4f74ed65ddb2.notice@0
          displayName: 'generate thirdpartynotices.html file'
          inputs:
            outputfile: '$(System.DefaultWorkingDirectory)/thirdpartynotices.html'
            outputformat: html
        - task: VSBuild@1
          displayName: 'Build Solution **\*.sln'
          inputs:
            vsVersion: 17.0
            platform: '$(BuildPlatform)'
            configuration: release
        - task: DotNetCoreCLI@2
          displayName: 'Test Assemblies (.NET Core) **\*test*.csproj'
          inputs:
            arguments: --no-build --blame --verbosity normal --configuration release --filter TestCategory!=Integration
            command: test
            projects: |
              **\*test*.csproj
        - task: PowerShell@2
          displayName: 'Create tsa.config file (BinSkim)'
          inputs:
            targetType: "filePath"
            filePath: tools\scripts\pipeline\build\create-tsa-config.ps1
            arguments: '-InstanceUrl "$(TSAInstanceUrl)" -ProjectName "$(TSAProjectName)" -CodeBaseAdmins "$(TSACodeBaseAdmins)" -AreaPath "$(TSAAreaPath)" -IterationPath "$(TSAIterationPath)" -NotificationAliases "$(TSANotificationAlias)" -Tools "BinSkim" -OutputFile "$(Build.SourcesDirectory)\tsa.config"'
        - task: CopyFiles@2
          displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
          inputs:
            Contents: '**\bin\release\**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
        - task: CopyFiles@2
          displayName: 'Copy MSI File to: $(Build.ArtifactStagingDirectory)'
          inputs:
            Contents: '**\CLI_Installer\bin\x86\Release\**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
#        - task: CopyFiles@2
#          displayName: 'Copy CLI_Full Files for Signing Validation'
#          inputs:
#            SourceFolder: '$(Build.SourcesDirectory)\src'
#            Contents: |
#              CLI_Full\bin\release\net6.0\win7-x86\?(*.exe|*.dll)
#            TargetFolder: '$(Build.ArtifactStagingDirectory)\SigningValidation'
#        - task: CopyFiles@2
#          displayName: 'Copy CLI Files for Signing Validation'
#          inputs:
#            SourceFolder: '$(Build.SourcesDirectory)\src'
#            Contents: 'CLI\bin\release\net6.0\**\?(*.exe|*.dll)'
#            TargetFolder: '$(Build.ArtifactStagingDirectory)\SigningValidation'
#        - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1
#          displayName: 'Perform Cleanup Tasks'
#          condition: succeededOrFailed()
#        templateContext:
#          outputs:
#          - output: pipelineArtifact
#            displayName: 'Publish Artifact: drop'
#          - output: pipelineArtifact
#            displayName: 'Publish Artifact: NuGet package'
#            targetPath: 'src\CI\bin\Release\NuGet'
#            artifactName: 'NuGet'
#          - output: pipelineArtifact
#            displayName: 'Publish Artifact: Rules markdown'
#            targetPath: 'src\RulesMD\bin\Release\axe-windows-rules.md'
#            artifactName: 'axe-windows-rules'
#          - output: pipelineArtifact
#            displayName: 'Publish Artifact: CLI (msi)'
#            targetPath: 'src\CLI_Installer\bin\x86\Release\AxeWindowsCLI.msi'
#            artifactName: 'CLI-msi'
#          - output: pipelineArtifact
#            displayName: 'Publish Artifact: CLI (zip)'
#            targetPath: 'src\CLI_Installer\bin\x86\Release\AxeWindowsCLI.zip'
#            artifactName: 'CLI-zip'