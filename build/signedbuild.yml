name: $(date:yyyy-MM-dd)$(rev:.rr)
trigger: none
pr: none
variables:
  BuildPlatform: 'x86'
  CreateAxeWindowsNugetPackage: 'true'
  PublicRelease: 'false'
  SignAppForRelease: 'false'
  MicroBuild_NuPkgSigningEnabled: 'false'
  TeamName: 'Axe Windows'
  system.debug: 'true' #set to true in case our signed build flakes out again
  FAKES_SUPPORTED: 1

jobs:
- job: ComplianceRelease
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: NuGetToolInstaller@0
    displayName: 'Use NuGet 5.0.0'
    inputs:
      versionSpec: '5.0.0'

  - task: NuGetCommand@2
    displayName: 'NuGet restore'

  - task: PowerShell@2
    displayName: 'License Header Check'
    inputs:
      targetType: "filePath"
      filePath: tools\scripts\verification.scripts\LicenseHeaderVerification.ps1
      arguments: '-target  $(Build.Repository.LocalPath) -licenseHeaderPath tools\scripts\verification.scripts\LicenseHeader.txt -extensions *.xaml,*.xml,*.cs,*.ps1 -addIfAbsent $false'

  - task: VSBuild@1
    displayName: 'Build Solution **\*.sln'
    inputs:
      vsVersion: 15.0
      platform: '$(BuildPlatform)'
      configuration: release

  - task: ms.build-release-task.custom-build-release-task.wpf-static-analysis@0
    displayName: 'WPF Static Analysis'
    inputs:
      input: 'src\Axe.Windows\bin\Release'

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      Contents: '**\bin\release\**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Compliance'
    inputs:
      ArtifactName: 'Compliance'

  - task: VSTest@2
    displayName: 'Test Assemblies **\release\*test*.dll;-:**\obj\**'
    inputs:
      testAssemblyVer2: |
        **\*test*.dll
        !**\obj\**
      vsTestVersion: 15.0
      codeCoverageEnabled: false
      platform: '$(BuildPlatform)'
      configuration: release
      rerunFailedTests: true

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'

- job: ComplianceDebug
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: NuGetToolInstaller@0
    displayName: 'Use NuGet 5.0.0'
    inputs:
      versionSpec: '5.0.0'

  - task: NuGetCommand@2
    displayName: 'NuGet restore'

  - task: VSBuild@1
    displayName: 'Build Solution **\*.sln'
    inputs:
      vsVersion: 15.0
      platform: '$(BuildPlatform)'
      configuration: debug

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      Contents: '**\bin\debug\**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Compliance'
    inputs:
      ArtifactName: 'Compliance'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-autoapplicability.AutoApplicability@1
    displayName: 'Run AutoApplicability'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
    displayName: 'Run CredScan'
    inputs:
      verboseOutput: true
      debugMode: false

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-roslynanalyzers.RoslynAnalyzers@2
    displayName: 'Run Roslyn analyzers'
    inputs:
        userProvideBuildInfo: auto
        rulesetName: recommended
        internalAnalyzersVersion: 2.6.3-beta1
        microsoftAnalyzersVersion: 2.9.3

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
    displayName: 'Run PoliCheck'
    inputs:
      targetType: F
    continueOnError: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@1
    displayName: 'Create Security Analysis Report (CredScan, RoslynAnalyzers, and PoliCheck)'
    inputs:
      CredScan: true
      RoslynAnalyzers: true
      PoliCheck: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
    displayName: 'Publish Security Analysis Logs (CredScan, RoslynAnalyzers, and PoliCheck)'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'Post Analysis (CredScan, RoslynAnalyzers, and PoliCheck)'
    inputs:
      CredScan: true
      RoslynAnalyzers: true
      PoliCheck: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
    displayName: 'TSA upload (CredScan, RoslynAnalyzers, and PoliCheck)'
    inputs:
      tsaVersion: TsaV2
      codebase: NewOrUpdate
      codeBaseName: $(TSACodeBaseName)
      notificationAlias: $(TSANotificationAlias)
      codeBaseAdmins: $(TSACodeBaseAdmins)
      instanceUrlForTsaV2: $(TSAInstance)
      projectNameMSENG: $(TSAProjectName)
      areaPath: $(TSAAreaPath)
      iterationPath: $(TSAIterationPath)
      uploadAPIScan: false
      uploadBinSkim: false
      uploadFortifySCA: false
      uploadModernCop: false
      uploadPREfast: false
      uploadRoslyn: false
      uploadTSLint: false

  - task: VSTest@2
    displayName: 'Test Assemblies **\debug\*test*.dll;-:**\obj\**'
    inputs:
      testAssemblyVer2: |
        **\*test*.dll
        !**\obj\**
      testFiltercriteria: 'TestCategory!=RequiresNetwork'
      vsTestVersion: 15.0
      codeCoverageEnabled: false
      platform: '$(BuildPlatform)'
      configuration: debug
      rerunFailedTests: true

- job: SignedRelease
  dependsOn: 
  - ComplianceRelease
  - ComplianceDebug
  condition: and(succeeded(), succeeded())
  pool: VSEng-MicroBuildVS2017
  variables:
    PublicRelease: 'true'
    MicroBuild_NuPkgSigningEnabled: 'false'
    SignAppForRelease: 'true'
  steps:
  - task: ms-vseng.MicroBuildTasks.a0262b21-fb8f-46f8-bb9a-60ed560d4a87.MicroBuildLocalizationPlugin@1
    displayName: 'Install Localization Plugin'

  - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
    displayName: 'Install Signing Plugin'
    inputs:
      signType: real
      esrpSigning: true
    condition: and(succeeded(), ne(variables['SignType'], ''))

  - task: NuGetToolInstaller@0
    displayName: 'Use NuGet 5.0.0'
    inputs:
      versionSpec: '5.0.0'

  - task: NuGetCommand@2
    displayName: 'NuGet restore'

  - task: VSBuild@1
    displayName: 'Build Solution **\*.sln'
    inputs:
      vsVersion: 15.0
      platform: '$(BuildPlatform)'
      configuration: release

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      Contents: '**\bin\release\**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: NuGet package'
    inputs:
      PathtoPublish: 'src\CI\bin\Release\NuGet'
      ArtifactName: 'NuGet'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
    displayName: 'Run BinSkim'
    inputs:
      InputType: Basic
      # Double-quote syntax with trailing backslash on each line concatenates lines without spaces
      AnalyzeTarget: "src\\Actions\\bin\\Release\\*.dll;\
                      src\\Automation\\bin\\Release\\*.dll;\
                      src\\Core\\bin\\Release\\*.dll;\
                      src\\Desktop\\bin\\Release\\*.dll;\
                      src\\Rules\\bin\\Release\\*.dll;\
                      src\\RuleSelection\\bin\\Release\\*.dll;\
                      src\\Telemetry\\bin\\Release\\*.dll;\
                      src\\Win32\\bin\\Release\\*.dll;"

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@1
    displayName: 'Create Security Analysis Report (BinSkim)'
    inputs:
      BinSkim: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
    displayName: 'Publish Security Analysis Logs (BinSkim)'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'Post Analysis (BinSkim)'
    inputs:
      BinSkim: true

  - task: VSTest@2
    displayName: 'Test Assemblies **\release\*test*.dll;-:**\obj\**'
    inputs:
      testAssemblyVer2: |
        **\*test*.dll
        !**\obj\**
      testFiltercriteria: 'TestCategory!=Integration'
      vsTestVersion: 15.0
      codeCoverageEnabled: false
      platform: '$(BuildPlatform)'
      configuration: release
      rerunFailedTests: true

  - task: PublishSymbols@1
    displayName: 'Index Sources'
    inputs:
      SearchPattern: '**\bin\**\*.pdb'
    continueOnError: true

  - task: ms-vscs-artifact.build-tasks.artifactSymbolTask-1.artifactSymbolTask@0
    displayName: 'Publish Symbols'
    inputs:
      symbolServiceURI: 'https://microsoft.artifacts.visualstudio.com/DefaultCollection'
      requestName: 'CollectionId/$(System.CollectionId)/ProjectId/$(System.TeamProjectId)/BuildId/$(Build.BuildId)'
      sourcePath: '$(Build.ArtifactStagingDirectory)'
      detailedLog: true
      usePat: false

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
    displayName: 'TSA upload (BinSkim)'
    inputs:
      tsaVersion: TsaV2
      codebase: NewOrUpdate
      codeBaseName: $(TSACodeBaseName)
      notificationAlias: $(TSANotificationAlias)
      codeBaseAdmins: $(TSACodeBaseAdmins)
      instanceUrlForTsaV2: $(TSAInstance)
      projectNameMSENG: $(TSAProjectName)
      areaPath: $(TSAAreaPath)
      iterationPath: $(TSAIterationPath)
      uploadAPIScan: false
      uploadCredScan: false
      uploadFortifySCA: false
      uploadFxCop: false
      uploadModernCop: false
      uploadPoliCheck: false
      uploadPREfast: false
      uploadRoslyn: false
      uploadTSLint: false

  - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1
    displayName: 'Perform Cleanup Tasks'
    condition: succeededOrFailed()
